// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, provider, access_token, password_hash) 
VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, provider, access_token, password_hash, created_at, updated_at
`

type CreateAccountParams struct {
	UserID       pgtype.UUID
	Provider     string
	AccessToken  pgtype.Text
	PasswordHash pgtype.Text
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.UserID,
		arg.Provider,
		arg.AccessToken,
		arg.PasswordHash,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.AccessToken,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, primary_email) 
    VALUES ($1, $2)
RETURNING id, username, primary_email, created_at, updated_at
`

type CreateUserParams struct {
	Username     string
	PrimaryEmail pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PrimaryEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PrimaryEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAccounts = `-- name: GetUserAccounts :many
SELECT id, user_id, provider, access_token, password_hash, created_at, updated_at FROM accounts
WHERE user_id = $1
`

func (q *Queries) GetUserAccounts(ctx context.Context, userID pgtype.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, getUserAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.AccessToken,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, primary_email, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PrimaryEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, primary_email, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PrimaryEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
